# #+SETUPFILE: org-html-themes/setup/theme-readtheorg-local.setup
#+SETUPFILE: org-bootstrap-document/setup.org
#+OPTIONS: ':nil *:t -:t ::t <:t H:4 \n:nil ^:t arch:headline author:t
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:t f:t inline:t num:3 p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+TITLE: Matematika skozi Python
#+DATE: <2017-01-26 čet>
#+AUTHOR: Martin Vuk
#+EMAIL: martin.vuk@fri.uni-lj.si
#+LANGUAGE: sl
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.1.1 (Org mode 9.0.3)
#+PROPERTY: header-args  :results output 
* Uvod 
Pred vami je priročnik o tem, kako uporabiti znanje matematike pri
programiranju. Priročnik je nastal kot dopolnilno gradivo pri predmetu
Matematika na Fakulteti za računalništvo in informatiko, Univerze v Ljubljani.

Priročnik spremljajo tudi naloge na portalu [[https://www.projekt-tomo.si/course/15/][projekt Tomo]], kjer lahko vsebino te
knjige tudi praktično preskusite. Z reševanjem teh nalog boste pridobili tako
znanje programiranja, kot tudi boljše razumevanje matematičnih pojmov. Obvezno
za vse, ki hočejo od predmeta nekaj več. Vabljeni ste tudi, da dodate
predme Matematika med svoje predmete, tako da kliknete na zvezdico nad imen Symbol’s value as variable is void: org-export-use-babelom
predmeta. 

Poleg tega so na voljo tudi kratki vide Symbol’s value as variable is void: org-export-use-babeli na YouTube kanalu.

** Kako brati to knjigo
Vsekakor priporočamo, da naloge poskusite rešiti povsem samostojno. Rešitve so 
v začetku skrite, da vas ne bi premamile. Če se vam zatakne, si poglejte najprej
splošna, matematična navodila za rešitev naloge in poskusite vsaj programerski
del rešiti sami. Če tudi to ne gre, si le poglejte rešitev. Rešitve ne
kopirajte, ampak jo raje prepišete ali še bolje napišite sami. Tako bodo vaši
možgani imeli več od tega.

Knjiga je na voljo v različnih formatih

- [[file:index.html][HTML spletna stran]]
- [[file:index.pdf][PDF dokument]]
- predmet [[https://www.projekt-tomo.si/course/15/][Matematika]] na portalu [[https://www.projekt-tomo.si/][Projekt Tomo]]
- [[http:index.org][izvorna koda]] v obliki  [[https://orgmode.org][Org-mode]] za urejevalnik [[https://www.gnu.org/software/emacs/][Emacs]]
 

* Zaporedja in vrste
** Zaporedja
V vsakdanjem življenju pojem zaporedja pogosto
pomeni seznam elementov, pri katerem je pomemben vrstni red. Na primer zaporedje
plesnih korakov v koreografiji, zaporedje števil pri lotu ali pa zaporedje
postajališč na liniji mestnega prometa. Matematike seveda zanima vse kar je
povezano z neskončnostjo, zato si pod pojmom zaporedja predstavljamo neskončna
zaporedja, ki jih formalno definiramo kot funkcijo 
$$\mathbb{N}\to A,$$ 
ki vsakemu naravnemu številu $n$ priredi nek element množice $a_n=a(n)\in A$. 
Element $a_n$ imenujemo $n$ - ti člen zaporedja.  V Pythonu so neskončni objekti nepraktični[fn:generator], zato so zaporedja povezana s
podatkovnim tipom ~list~, ki predstavlja končni seznam elementov in zankami
~for~ in ~while~, s katerimi se sprehodimo po elementih seznama in izvedemo
zaporedje korakov.
[fn:generator] Tudi v Pythonu poznamo posplošitev pojma končnega zaporedja
in to je [[https://wiki.python.org/moin/Generators][generator]], ki je še najbližje matematičnemu pojmu zaporedja.
*** Naloga
    :PROPERTIES:
    :HTML_CONTAINER_CLASS: naloga
    :END:
Zapiši približne vrednosti prvih 15 členov zaporedja $a_n=\frac{n-1}{n+1}$
**** Namig
     :PROPERTIES:
     :HTML_CONTAINER_CLASS: resitev
     :END:
    Uporabi zanko ~for n in range(100):~.
**** Rešitev 
     :PROPERTIES:
     :HTML_CONTAINER_CLASS: resitev
     :END:
    #+BEGIN_SRC python
      for n in range(15):
          print((n-1)/(n+1))
    #+END_SRC

    #+RESULTS:
    #+begin_example
    -1.0
    0.0
    0.3333333333333333
    0.5
    0.6
    0.6666666666666666
    0.7142857142857143
    0.75
    0.7777777777777778
    0.8
    0.8181818181818182
    0.8333333333333334
    0.8461538461538461
    0.8571428571428571
    0.8666666666666667
#+end_example

*** Naloga
    :PROPERTIES:
    :HTML_CONTAINER_CLASS: naloga
    :END:
Zaporedje je podano z rekurzivno formulo $$a_{n+1}=\frac{2a_n^3+2}{3a_n^2}$$ in
začetnim členom $a_0=3$. Zapiši prvih 10 členov zaporedja. Kaj opaziš? 
**** Rešitev
     :PROPERTIES:
     :HTML_CONTAINER_CLASS: resitev
     :END:
#+BEGIN_SRC python :results output
  an = 2
  print(an)
  for i in range(9):
      an = (2*an**3+2)/(3*an**2)
      print(an)
#+END_SRC

#+RESULTS:
#+begin_example
2
1.5
1.2962962962962963
1.2609322247417485
1.2599218605659261
1.2599210498953948
1.259921049894873
1.2599210498948732
1.259921049894873
1.2599210498948732
#+end_example

Členi zaporedja se po 5. členu začnejo ponavljati. Zaporedje je očitno
*konvergentno*. Zadnjih nekaj členov so zelo dobri približki za *limito*.
**** Rešitev z generatorjem
     :PROPERTIES:
     :HTML_CONTAINER_CLASS: resitev
     :END:
Za ilustracijo nalogo rešimo še z *generatorjem*. Generator je funkcija, ki je
posebne vrste tip *iteratorja*. *Iterator* je objekt, ki pozna metodo ~next()~
in ga lahko uporabimo v ~for~ zanki. Funkcijo spremenimo v *generator* z uporabo
ukaza ~yield~, ki je zelo podoben ukazu ~return~, le da se ob njegovem klicu
izvajanje funkcije zamrzne do naslednjega klica metode ~next()~. Z generatorjem
na ta način lahko definiramo tudi neskončna zaporedja oziroma zaporedja
poljubnih dolžin. 

#+BEGIN_SRC python :results output
  def zaporedje(n):
      "Generator za prvih n členov zaporedja an"
      an = 2
      while n>0:
          yield an
          an = (2*an**3+2)/(3*an**2)
          n -= 1

  for clen in zaporedje(10):
      print(clen)
#+END_SRC

#+RESULTS:
#+begin_example
2
1.5
1.2962962962962963
1.2609322247417485
1.2599218605659261
1.2599210498953948
1.259921049894873
1.2599210498948732
1.259921049894873
1.2599210498948732
#+end_example
**** Rešitev z rekurzijo
     :PROPERTIES:
     :HTML_CONTAINER_CLASS: resitev
     :END:
Zaporedje $a_n$ lahko definiramo tudi z rekurzivno funkcijo. Paziti moramo le,
da znotraj funkcije opravimo le en klic na isto funkcijo, sicer časovna
zahtevnost eksponentno narašča.
#+BEGIN_SRC python :results output
  def zaporedje(n):
      "Rekurzivna funkcija, ki definira rekurzivno zaporedje"
      if n<=0:
          return 2
      else:
          an = zaporedje(n-1)
          return (2*an**3+2)/(3*an**2) 

  for n in range(10):
      print(zaporedje(n))
#+END_SRC  

#+RESULTS:
#+begin_example
2
1.5
1.2962962962962963
1.2609322247417485
1.2599218605659261
1.2599210498953948
1.259921049894873
1.2599210498948732
1.259921049894873
1.2599210498948732
#+end_example

Kljub temu, da smo se z enim rekurzivnim klicem funkcije izognili eksponentni
časovni odvisnosti, je pri večkratnih klicih funkcije ~zaporedje~ še vedno
precej odvečnih izračunov. Ob vsakem zaporednem klicu funkcije ponovno
izračunamo vse člene od prvega naprej. Časovna zahtevnost ~for~ zanke je tako
kvadratična, medtem ko je pri prejšnjih rešitvah časovna zahtevnost linearna. 
*** Naloga
    :PROPERTIES:
    :HTML_CONTAINER_CLASS: naloga
    :END:
Za zaporedje $$a_n=\frac{n^2+n-1}{1-2n^2},$$ poišči prvi člen $a_n$, ki se za
manj kot
$\varepsilon=\frac{1}{100}$ razlikuje od limite.
**** Namig
     :PROPERTIES:
     :HTML_CONTAINER_CLASS: resitev
     :END:
Poišči najmanjše naravno število $n$, da bo $|a_n-a|<\varepsilon$, kjer je  
$$a=\lim_{n\to\infty}a_n=-\frac{1}{2}.$$ Uporabi zanko ~while~.
**** Rešitev
     :PROPERTIES:
     :HTML_CONTAINER_CLASS: resitev
     :END:
#+BEGIN_SRC python :results output
  n = 0
  a = -0.5
  eps = 0.01
  while abs((n**2+n-1)/(1-2*n**2)-a)>eps:
      n += 1
  print(n)
#+END_SRC

#+RESULTS:
: 50
**** Rešitev z generatorjem
     :PROPERTIES:
     :HTML_CONTAINER_CLASS: resitev
     :END:
Za ilustracijo nalogo rešimo še z *generatorjem*. Generator je funkcija, ki je
posebne vrste tip *iteratorja*. *Iterator* je objekt, ki pozna metodo ~next()~
in ga lahko uporabimo v ~for~ zanki. Funkcijo spremenimo v *generator* z uporabo
ukaza ~yield~, ki je zelo podoben ukazu ~return~, le da se ob 

#+BEGIN_SRC python :results output
  def zaporedje():
      n = 0
      while True:
          yield n, (n**2+n-1)/(1-2*n**2)
          n += 1
  a = -0.5
  eps = 0.01

  for n, clen in zaporedje():
      if abs(clen-a)<eps:
          print(n)
          break
#+END_SRC

#+RESULTS:
: 50

** Vrste

* Funkcije
** Ničle funkcij in enačbe
*** Ničle tabelirane funkcije
Za zvezno funkcija poznamo le nekaj posameznih vrednosti. Podana imamo dva
seznama enake dolžine ~x~ in ~y~, tako da velja ~y[i] == f(x[i])~.

Napišite funkcijo ~nicle(x,y)~, ki izračuna približne vrednosti ničel, tako da
funkcijo nadomesti z /linearnim zlepkom/ in izračuna ničle zlepka. Linearni zlepek
dobimo tako, da graf funkcije $f(x)$
nadomestimo z daljicami (linearno funkcijo $y=kx+n$) med točkami, ki so podane s
seznamoma ~x~ in ~y~.

Funkcija ~nicle(x,y)~ naj vrne seznam približkov za ničle, urejenih po velikosti. Primer:

#+BEGIN_SRC python :noweb strip-export :exports both
<<nicle>>
x = [-1, 0, 1, 2, 3]
y = [1, -1, 1, 2, 3]
print(nicle(x,y))
#+END_SRC

#+RESULTS:
: [-0.5, 0.5]
**** Matematična izpeljava
Označimo z $x_1,x_2,\ldots,x_n$ in z $y_1,y_2,\ldots, y_n$ vrednosti v tabelah
~x~ in ~y~. Za neznano zvezno funkcijo $f$ velja 
$$y_i=f(x_i).$$

Ker je $f4 zvezna, lahko z gotovostjo trdimo, da je ničla na intervalu
$[x_i,x_{i+1}]$, kjer sta $y_i$ in $y_{i+1}$ različnega predznaka. Najprej mora
funkcija ~nicle~ poiskati intervale, kjer se to zgodi.

Denimo, da je na intervalu $[x_i,x_{i+1}]$ ničla. Enačbo za odsek linearnega
zlepka na tem intervalu dobimo tako, da poiščemo enačbo premice skozi točki na
krajiščih $(x_i,y_i)$ in $(x_{i+1},y_{i+1})$. V resnici nas zanima le, pri
kateri vrednosti, premica seka os $x$. To najlažje določimo s podobnimi
trikotniki:

#+header: :exports results :file zlepek.png 
#+header: :imagemagick yes :iminoptions -density 600 :imoutoptions -geometry 400 
#+header: :packages '(("" "tikz")) :border 1em :results raw
#+begin_src latex
  % Define block styles
  \usetikzlibrary{arrows}
\definecolor{uququq}{rgb}{0.25,0.25,0.25}
\definecolor{xdxdff}{rgb}{0.49,0.49,1}
\definecolor{qqqqff}{rgb}{0,0,1}
\begin{tikzpicture}[line cap=round,line join=round,>=triangle 45,x=1.0cm,y=1.0cm]
\draw[->,color=black] (-1,0) -- (6,0);
\foreach \x in {-1,1,2,3,4,5}
\draw[shift={(\x,0)},color=black] (0pt,-2pt);
\draw[color=black] (5.64,0.09) node [anchor=south west] { x};
\draw[->,color=black] (0,-5) -- (0,3);
\foreach \y in {-5,-4,-3,-2,-1,1,2}
\draw[shift={(0,\y)},color=black] (2pt,0pt) -- (-2pt,0pt);
\draw[color=black] (0.11,2.57) node [anchor=west] { y};
\clip(-1,-5) rectangle (6,3);
\draw (1,2)-- (4,-4);
\draw (1,2)-- (1,0);
\draw (4,-4)-- (4,0);
\draw (1,0)-- (4,0);
%\begin{scriptsize}
\fill [color=qqqqff] (1,2) circle (1.5pt);
\draw[color=qqqqff] (1.75,2.28) node {$(x_i,y_i)$};
\fill [color=qqqqff] (4,-4) circle (1.5pt);
\draw[color=qqqqff] (5.1,-3.7) node {$(x_{i+1},y_{i+1}})$};
\fill [color=xdxdff] (1,0) circle (1.5pt);
\draw[color=xdxdff] (1.42,0.28) node {$x_i$};
\draw[color=black] (0.96,1.16) node {$y_i$};
\fill [color=qqqqff] (4,0) circle (1.5pt);
\draw[color=qqqqff] (4.78,0.28) node {$x_{i+1}$};
\draw[color=black] (5.05,-1.83) node {$y_{i+1}$};
\fill [color=uququq] (2,0) circle (1.5pt);
\draw[color=uququq] (2.32,0.28) node {$x$};
%\end{scriptsize}
\end{tikzpicture}
#+end_src

#+RESULTS:
[[file:zlepek.png]]
**** Rešitev
#+name: nicle
#+BEGIN_SRC python 
  def nicle(x, y):
      x_n = []
      for i in range(len(x)-1):
          if y[i]*y[i+1]<0:
              nicla = (y[i+1]*x[i] - y[i]*x[i+1])/(y[i+1] - y[i])
              x_n.append(nicla)
      return x_n
#+END_SRC

#+RESULTS: nicle

*** Bisekcija
Če ima zvezna funkcija v krajiščih intervala različna predznaka, potem je na tem
intervalu zagotovo vsaj ena ničla. To dejstvo uporabi metoda bisekcije, s katero
lahko poiščemo ničle. 

Napišite funkcijo ~bisekcija(f, interval, eps)~, ki z bisekcijo poišče interval
dolžine največ eps, na katerem je ničla funkcije $f$. Krajišči začetnega intervala
sta podani v seznamu ~interval~. Funkcija naj vrne seznam s krajišči intervala. Če
vrednosti na intervalu nimajo različnega predznaka, naj funkcija javi napako
tipa ~ValueError~. 

Primer:

#+BEGIN_SRC python :noweb strip-export :exports both
<<bisekcija>>
f = lambda x: x**2-2
print(bisekcija(f, (1,2), 0.3))
#+END_SRC

#+RESULTS:
: [1, 1.5]

#+BEGIN_SRC python :noweb strip-export
  <<bisekcija>>
  try:
    f = lambda x: x**2-2
    bisekcija(f,(2,3),0.3)
  except ValueError as err:
    print(err)
#+END_SRC

#+RESULTS:
: Vrednosti v krajiščih nimajo različnih predznakov

ValueError: Na intervalu ni ničle.

**** Rešitev
#+name: bisekcija 
#+BEGIN_SRC python
  def bisekcija(f, interval, eps):
      a,b = interval
      fa, fb = (f(a),f(b))
      if fa*fb > 0:
          raise(ValueError("Vrednosti v krajiščih nimajo različnih predznakov"))
      while abs(b-a) > eps:
          c = (a+b)/2
          fc = f(c)
          if fa*fc < 0:
              b, fb = c, fc
          elif fb*fc <0:
              a, fa = c, fc
          elif fc == 0:
              return [c,c]
          return [a,b]
#+END_SRC
*** Sekantna metoda
** Izračun vrednosti polinoma
*** Hornerjev algoritem
** Kotne funkcije
*** Tabela kotnih funkcij
Napiši program, ki generira tabeli kotnih funkcij $\sin$ in $\cos$ na intervalu
$[0,2\pi]$  v točkah $$x_i=i\frac{\pi}{100};\quad i=0,\ldots, 200.$$ Uporabi
adicijske izreka za sinus in cosinus
\begin{eqnarray*}
\sin(x+y)&=&\sin(x)\cos(y)+\sin(y)\cos(x)\\
\cos(x+y)&=&\cos(x)\cos(y) - \sin(x)\sin(y)
\end{eqnarray*}
in približne vrednosti
 $\sin(\frac{\pi}{100})\simeq \frac{\pi}{100}$ 
src_octave{disp(sin(pi/100))} {{{results(= 0.031411=)}}}
$\cos(\frac{\pi}{100})\simeq 1$
src_python{import math; return math.cos(math.pi/100)} {{{results(=0.9995065603657316=)}}}.

Dobljene vrednosti primerjaj z vrednostmi, ki jih vrneta funkciji ~math.sin~
in ~math.cos~, tako da poiščete razlike. Kolikšna je največja razlika med
vrednostjo, ki jo je izračunal vaš program in vrednostjo, ki jo je dala vgrajena
funkcija?   
*** Sinus in kosinus 1
Napiši funkcijo, ki izračuna vrednost funkcije $\sin(x)$ in $\cos(x)$ na
intervalu $[0,\frac{\pi}{2}]$, tako da uporabiš
adicijska izreka za dvojni kot
$$\sin(2x) = 2\sin(x)\cos(x),\quad \cos(2x)=\cos^2(x)-\sin^2(x)$$  
 in za majhne $x$ upošteva približni enakosti
$$\sin(x)\simeq x\text{ in } \cos(x)\simeq 1;\quad |x|<10^{-1}.$$
*** Sinus in kosinus 2
Funkcijo iz prejšnje naloge razširi na vsa realna števila. Uporabi periodičnost
in simetrije funkcij $\sin$ in $\cos$.
* Odvod
** Simbolično odvajanje
*** RPN prestavitev računskih izrazov
*** Odvod RPN zapisa
** Avtomatsko odvajanje
*** Program kot matematična funkcija
*** Program kot zaporedje(kompozitum) preprostih operacij
** Numerično odvajanje
** Tangenta in normala
# #+INCLUDE: "./funkcije.org" :minlevel 1


# #+INCLUDE: "./integral.org" :minlevel 1
* Integral
** Nedoločeni integral
*** Integral polinoma
** Določeni integral
*** Trapezna in Simpsonova metoda
* Vektorji v ravnini in prostoru
** Vektorji
*** Python razred za vektorje
*** Skalarni in vektorski produkt
*** Enakost, kolinearnost in koplanarnost vektorjev
 Napišite razred `Vektor`, ki predstavlja vektorje (n-terice števil).
** Premica in ravnina v 3D
*** Python razreda za ravnino in premico
*** Enakost, vzporednost med ravninami, premicami
*** Presečišča
** Raytracing
*** Presečišče poltraka in ravnine
*** Presečišče poltraka in krogle
*** Scena s kroglo in svetilom
*** Scena s tetraedrom in svetilom
**** Ali točka leži na trikotniku?
*** Večkratni odboji
* Matrike in sistemi enačb
** Matrike
*** Python razred za matrike
** Gaussova eliminacija
* Licenca 
#+BEGIN_EXPORT html
<a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">
<img alt="Creative Commons licenca" style="border-width:0" src="https://i.creativecommons.org/l/by-sa/4.0/88x31.png" />
</a><br />
<span xmlns:dct="http://purl.org/dc/terms/" href="http://purl.org/dc/dcmitype/Text" property="dct:title" rel="dct:type">Matematika skozi Python</span>, 
avtorja <a xmlns:cc="http://creativecommons.org/ns#" href="https://mrcinv.github.io" property="cc:attributionName" rel="cc:attributionURL">Martin Vuk</a> 
je objavljena pod licenco <a rel="license" href="http://creativecommons.org/licenses/by-sa/4.0/">Creative Commons Priznanje avtorstva-Deljenje pod enakimi pogoji 4.0 Mednarodna licenco</a>.
<br />Za dodatna dovoljenja, ki presegajo obseg te licence, kontaktirajte avtorja. 
#+END_EXPORT
